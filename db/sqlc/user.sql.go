// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    firstname,
    lastname,
    email,
    password,
    user_role_id,
    sbu_id
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, firstname, lastname, email, password, user_role_id, sbu_id, created_at
`

type CreateUserParams struct {
	Firstname  string      `json:"firstname"`
	Lastname   string      `json:"lastname"`
	Email      string      `json:"email"`
	Password   string      `json:"password"`
	UserRoleID pgtype.Int8 `json:"user_role_id"`
	SbuID      pgtype.Int8 `json:"sbu_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Firstname,
		arg.Lastname,
		arg.Email,
		arg.Password,
		arg.UserRoleID,
		arg.SbuID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Lastname,
		&i.Email,
		&i.Password,
		&i.UserRoleID,
		&i.SbuID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, firstname, lastname, email, password, user_role_id, sbu_id, created_at FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Lastname,
		&i.Email,
		&i.Password,
		&i.UserRoleID,
		&i.SbuID,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, firstname, lastname, email, password, user_role_id, sbu_id, created_at FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Lastname,
		&i.Email,
		&i.Password,
		&i.UserRoleID,
		&i.SbuID,
		&i.CreatedAt,
	)
	return i, err
}

const listAdmins = `-- name: ListAdmins :many
SELECT id, firstname, lastname, email, password, user_role_id, sbu_id, created_at FROM users
WHERE user_role_id = $1
`

func (q *Queries) ListAdmins(ctx context.Context, userRoleID pgtype.Int8) ([]User, error) {
	rows, err := q.db.Query(ctx, listAdmins, userRoleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Firstname,
			&i.Lastname,
			&i.Email,
			&i.Password,
			&i.UserRoleID,
			&i.SbuID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, firstname, lastname, email, password, user_role_id, sbu_id, created_at FROM users
ORDER BY id
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Firstname,
			&i.Lastname,
			&i.Email,
			&i.Password,
			&i.UserRoleID,
			&i.SbuID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserInformation = `-- name: UpdateUserInformation :exec
UPDATE users
SET    firstname = $1,    lastname = $2,    email = $3,    user_role_id = $4,    sbu_id = $5
WHERE id = $6
`

type UpdateUserInformationParams struct {
	Firstname  string      `json:"firstname"`
	Lastname   string      `json:"lastname"`
	Email      string      `json:"email"`
	UserRoleID pgtype.Int8 `json:"user_role_id"`
	SbuID      pgtype.Int8 `json:"sbu_id"`
	ID         int64       `json:"id"`
}

func (q *Queries) UpdateUserInformation(ctx context.Context, arg UpdateUserInformationParams) error {
	_, err := q.db.Exec(ctx, updateUserInformation,
		arg.Firstname,
		arg.Lastname,
		arg.Email,
		arg.UserRoleID,
		arg.SbuID,
		arg.ID,
	)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users SET password = $2
WHERE id = $1
`

type UpdateUserPasswordParams struct {
	ID       int64  `json:"id"`
	Password string `json:"password"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserPassword, arg.ID, arg.Password)
	return err
}

const updateUserRole = `-- name: UpdateUserRole :exec
UPDATE users SET user_role_id = $2
WHERE id = $1
`

type UpdateUserRoleParams struct {
	ID         int64       `json:"id"`
	UserRoleID pgtype.Int8 `json:"user_role_id"`
}

func (q *Queries) UpdateUserRole(ctx context.Context, arg UpdateUserRoleParams) error {
	_, err := q.db.Exec(ctx, updateUserRole, arg.ID, arg.UserRoleID)
	return err
}

const updateUserSBU = `-- name: UpdateUserSBU :exec
UPDATE users SET sbu_id = $2
WHERE id = $1
`

type UpdateUserSBUParams struct {
	ID    int64       `json:"id"`
	SbuID pgtype.Int8 `json:"sbu_id"`
}

func (q *Queries) UpdateUserSBU(ctx context.Context, arg UpdateUserSBUParams) error {
	_, err := q.db.Exec(ctx, updateUserSBU, arg.ID, arg.SbuID)
	return err
}
