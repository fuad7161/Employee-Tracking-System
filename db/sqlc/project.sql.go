// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: project.sql

package db

import (
	"context"
)

const createProject = `-- name: CreateProject :one
INSERT INTO projects (
    project_name,
    client_id
) VALUES (
    $1, $2
) RETURNING id, project_name, client_id, created_at
`

type CreateProjectParams struct {
	ProjectName string `json:"project_name"`
	ClientID    int64  `json:"client_id"`
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, createProject, arg.ProjectName, arg.ClientID)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.ProjectName,
		&i.ClientID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteProject = `-- name: DeleteProject :exec
DELETE FROM projects WHERE id = $1
`

func (q *Queries) DeleteProject(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteProject, id)
	return err
}

const getProjectByID = `-- name: GetProjectByID :one
SELECT id, project_name, client_id, created_at FROM projects
WHERE id = $1
`

func (q *Queries) GetProjectByID(ctx context.Context, id int64) (Project, error) {
	row := q.db.QueryRow(ctx, getProjectByID, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.ProjectName,
		&i.ClientID,
		&i.CreatedAt,
	)
	return i, err
}

const listProjects = `-- name: ListProjects :many
SELECT id, project_name, client_id, created_at FROM projects
ORDER BY id
`

func (q *Queries) ListProjects(ctx context.Context) ([]Project, error) {
	rows, err := q.db.Query(ctx, listProjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Project{}
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.ProjectName,
			&i.ClientID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProjectByID = `-- name: UpdateProjectByID :exec
UPDATE projects SET project_name = $2,client_id = $3
WHERE id = $1
`

type UpdateProjectByIDParams struct {
	ID          int64  `json:"id"`
	ProjectName string `json:"project_name"`
	ClientID    int64  `json:"client_id"`
}

func (q *Queries) UpdateProjectByID(ctx context.Context, arg UpdateProjectByIDParams) error {
	_, err := q.db.Exec(ctx, updateProjectByID, arg.ID, arg.ProjectName, arg.ClientID)
	return err
}
