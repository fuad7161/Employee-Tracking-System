// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: client.sql

package db

import (
	"context"
)

const createClient = `-- name: CreateClient :one
INSERT INTO clients (
    client_name,
    status
) VALUES (
    $1, $2
) RETURNING id, client_name, status, created_at
`

type CreateClientParams struct {
	ClientName string `json:"client_name"`
	Status     string `json:"status"`
}

func (q *Queries) CreateClient(ctx context.Context, arg CreateClientParams) (Client, error) {
	row := q.db.QueryRow(ctx, createClient, arg.ClientName, arg.Status)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.ClientName,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const deleteClient = `-- name: DeleteClient :exec
DELETE FROM clients WHERE id = $1
`

func (q *Queries) DeleteClient(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteClient, id)
	return err
}

const getClientByID = `-- name: GetClientByID :one
SELECT id, client_name, status, created_at FROM clients
WHERE id = $1
`

func (q *Queries) GetClientByID(ctx context.Context, id int64) (Client, error) {
	row := q.db.QueryRow(ctx, getClientByID, id)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.ClientName,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const listClients = `-- name: ListClients :many
SELECT id, client_name, status, created_at FROM clients
ORDER BY id
`

func (q *Queries) ListClients(ctx context.Context) ([]Client, error) {
	rows, err := q.db.Query(ctx, listClients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Client{}
	for rows.Next() {
		var i Client
		if err := rows.Scan(
			&i.ID,
			&i.ClientName,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateClient = `-- name: UpdateClient :exec
UPDATE clients SET status = $2, client_name = $3
WHERE id = $1
`

type UpdateClientParams struct {
	ID         int64  `json:"id"`
	Status     string `json:"status"`
	ClientName string `json:"client_name"`
}

func (q *Queries) UpdateClient(ctx context.Context, arg UpdateClientParams) error {
	_, err := q.db.Exec(ctx, updateClient, arg.ID, arg.Status, arg.ClientName)
	return err
}

const updateClientStatus = `-- name: UpdateClientStatus :exec
UPDATE clients SET status = $2
WHERE id = $1
`

type UpdateClientStatusParams struct {
	ID     int64  `json:"id"`
	Status string `json:"status"`
}

func (q *Queries) UpdateClientStatus(ctx context.Context, arg UpdateClientStatusParams) error {
	_, err := q.db.Exec(ctx, updateClientStatus, arg.ID, arg.Status)
	return err
}
