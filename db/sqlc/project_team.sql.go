// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: project_team.sql

package db

import (
	"context"
)

const createProjectTeam = `-- name: CreateProjectTeam :one
INSERT INTO project_teams (
    project_id,
    user_id
) VALUES (
    $1, $2
) RETURNING id, project_id, user_id, created_at
`

type CreateProjectTeamParams struct {
	ProjectID int64 `json:"project_id"`
	UserID    int64 `json:"user_id"`
}

func (q *Queries) CreateProjectTeam(ctx context.Context, arg CreateProjectTeamParams) (ProjectTeam, error) {
	row := q.db.QueryRow(ctx, createProjectTeam, arg.ProjectID, arg.UserID)
	var i ProjectTeam
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteProjectTeamUser = `-- name: DeleteProjectTeamUser :exec
DELETE FROM project_teams WHERE id = $1
`

func (q *Queries) DeleteProjectTeamUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteProjectTeamUser, id)
	return err
}

const getProjectTeamUserByID = `-- name: GetProjectTeamUserByID :one
SELECT id, project_id, user_id, created_at FROM project_teams
WHERE id = $1
`

func (q *Queries) GetProjectTeamUserByID(ctx context.Context, id int64) (ProjectTeam, error) {
	row := q.db.QueryRow(ctx, getProjectTeamUserByID, id)
	var i ProjectTeam
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const listProjectTeamUsers = `-- name: ListProjectTeamUsers :many
SELECT id, project_id, user_id, created_at FROM project_teams
ORDER BY project_id
`

func (q *Queries) ListProjectTeamUsers(ctx context.Context) ([]ProjectTeam, error) {
	rows, err := q.db.Query(ctx, listProjectTeamUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProjectTeam{}
	for rows.Next() {
		var i ProjectTeam
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserProjectIDByID = `-- name: UpdateUserProjectIDByID :exec
UPDATE project_teams SET project_id = $2
WHERE id = $1
`

type UpdateUserProjectIDByIDParams struct {
	ID        int64 `json:"id"`
	ProjectID int64 `json:"project_id"`
}

func (q *Queries) UpdateUserProjectIDByID(ctx context.Context, arg UpdateUserProjectIDByIDParams) error {
	_, err := q.db.Exec(ctx, updateUserProjectIDByID, arg.ID, arg.ProjectID)
	return err
}

const updateUserProjectIDByUserID = `-- name: UpdateUserProjectIDByUserID :exec
UPDATE project_teams SET project_id = $2
WHERE user_id = $1
`

type UpdateUserProjectIDByUserIDParams struct {
	UserID    int64 `json:"user_id"`
	ProjectID int64 `json:"project_id"`
}

func (q *Queries) UpdateUserProjectIDByUserID(ctx context.Context, arg UpdateUserProjectIDByUserIDParams) error {
	_, err := q.db.Exec(ctx, updateUserProjectIDByUserID, arg.UserID, arg.ProjectID)
	return err
}
