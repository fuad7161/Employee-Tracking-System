// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: task.sql

package db

import (
	"context"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (
    task_title,
    progress,
    project_id,
    assigned_user_id
) VALUES (
    $1, $2, $3, $4
) RETURNING id, task_title, progress, project_id, assigned_user_id, created_at
`

type CreateTaskParams struct {
	TaskTitle      string `json:"task_title"`
	Progress       int64  `json:"progress"`
	ProjectID      int64  `json:"project_id"`
	AssignedUserID int64  `json:"assigned_user_id"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, createTask,
		arg.TaskTitle,
		arg.Progress,
		arg.ProjectID,
		arg.AssignedUserID,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.TaskTitle,
		&i.Progress,
		&i.ProjectID,
		&i.AssignedUserID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteTask, id)
	return err
}

const getTaskByID = `-- name: GetTaskByID :one
SELECT id, task_title, progress, project_id, assigned_user_id, created_at FROM tasks
WHERE id = $1
`

func (q *Queries) GetTaskByID(ctx context.Context, id int64) (Task, error) {
	row := q.db.QueryRow(ctx, getTaskByID, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.TaskTitle,
		&i.Progress,
		&i.ProjectID,
		&i.AssignedUserID,
		&i.CreatedAt,
	)
	return i, err
}

const getTaskByTaskID = `-- name: GetTaskByTaskID :one
SELECT id, task_title, progress, project_id, assigned_user_id, created_at FROM tasks
WHERE id = $1
`

func (q *Queries) GetTaskByTaskID(ctx context.Context, id int64) (Task, error) {
	row := q.db.QueryRow(ctx, getTaskByTaskID, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.TaskTitle,
		&i.Progress,
		&i.ProjectID,
		&i.AssignedUserID,
		&i.CreatedAt,
	)
	return i, err
}

const listTasksByProjectID = `-- name: ListTasksByProjectID :many
SELECT id, task_title, progress, project_id, assigned_user_id, created_at FROM tasks
ORDER BY project_id
`

func (q *Queries) ListTasksByProjectID(ctx context.Context) ([]Task, error) {
	rows, err := q.db.Query(ctx, listTasksByProjectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.TaskTitle,
			&i.Progress,
			&i.ProjectID,
			&i.AssignedUserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTasksByUserID = `-- name: ListTasksByUserID :many
SELECT id, task_title, progress, project_id, assigned_user_id, created_at FROM tasks
WHERE assigned_user_id = $1
`

func (q *Queries) ListTasksByUserID(ctx context.Context, assignedUserID int64) ([]Task, error) {
	rows, err := q.db.Query(ctx, listTasksByUserID, assignedUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.TaskTitle,
			&i.Progress,
			&i.ProjectID,
			&i.AssignedUserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAssignedUserID = `-- name: UpdateAssignedUserID :exec
UPDATE tasks SET assigned_user_id = $2
WHERE id = $1
`

type UpdateAssignedUserIDParams struct {
	ID             int64 `json:"id"`
	AssignedUserID int64 `json:"assigned_user_id"`
}

func (q *Queries) UpdateAssignedUserID(ctx context.Context, arg UpdateAssignedUserIDParams) error {
	_, err := q.db.Exec(ctx, updateAssignedUserID, arg.ID, arg.AssignedUserID)
	return err
}

const updateTaskProgress = `-- name: UpdateTaskProgress :exec
UPDATE tasks SET progress = $2
WHERE id = $1
`

type UpdateTaskProgressParams struct {
	ID       int64 `json:"id"`
	Progress int64 `json:"progress"`
}

func (q *Queries) UpdateTaskProgress(ctx context.Context, arg UpdateTaskProgressParams) error {
	_, err := q.db.Exec(ctx, updateTaskProgress, arg.ID, arg.Progress)
	return err
}

const updateTaskProjectID = `-- name: UpdateTaskProjectID :exec
UPDATE tasks SET project_id = $2
WHERE id = $1
`

type UpdateTaskProjectIDParams struct {
	ID        int64 `json:"id"`
	ProjectID int64 `json:"project_id"`
}

func (q *Queries) UpdateTaskProjectID(ctx context.Context, arg UpdateTaskProjectIDParams) error {
	_, err := q.db.Exec(ctx, updateTaskProjectID, arg.ID, arg.ProjectID)
	return err
}

const updateTaskTile = `-- name: UpdateTaskTile :exec
UPDATE tasks SET task_title = $2
WHERE id = $1
`

type UpdateTaskTileParams struct {
	ID        int64  `json:"id"`
	TaskTitle string `json:"task_title"`
}

func (q *Queries) UpdateTaskTile(ctx context.Context, arg UpdateTaskTileParams) error {
	_, err := q.db.Exec(ctx, updateTaskTile, arg.ID, arg.TaskTitle)
	return err
}
